apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-preflight-job"
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/show-output": "true"
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation, hook-succeeded, hook-failed
    "helm.sh/hook-output-log-policy": hook-failed, hook-succeeded
spec:
  backoffLimit: 0  # do not retry on failure
  template:
    metadata:
      name: "{{ .Release.Name }}-preflight"
      labels:
        app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
        helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    spec:
      serviceAccountName: "{{ .Release.Name }}-preflight"
      restartPolicy: Never
      volumes:
        - name: preflights
          secret:
            secretName: "{{ .Release.Name }}-preflight-config"
        - name: kube-api-token
          projected:
            defaultMode: 420
            sources:
              - serviceAccountToken:
                  expirationSeconds: 3607
                  path: token
      containers:
      - name: pre-install-job
        image: "{{ .Values.preflight.image }}"
        command:
          - "bash"
          - "-c"
          - "preflight --interactive=false /preflights/preflight.yaml | tee result ; grep -q FAIL result && exit 1 || exit 0"
          #- "--interactive=false"
          #- "/preflights/preflight.yaml"
        volumeMounts:
        - name: preflights
          mountPath: /preflights
---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "-6"
    "helm.sh/hook-delete-policy": before-hook-creation, hook-succeeded, hook-failed
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
  name: "{{ .Release.Name }}-preflight-config"
data:
  preflight.yaml: {{ include "preflight.spec"  . | b64enc }}

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "{{ .Release.Name }}-preflight"
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "-6"
    "helm.sh/hook-delete-policy": before-hook-creation, hook-succeeded, hook-failed
secrets:
- name: "{{ .Release.Name }}-preflight-secret"

---
apiVersion: v1
kind: Secret
metadata:
  name: "{{ .Release.Name }}-preflight-secret"
  namespace: {{ .Release.Namespace }}
  annotations:
    kubernetes.io/service-account.name: "{{ .Release.Name }}-preflight"
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "-6"
    "helm.sh/hook-delete-policy": before-hook-creation, hook-succeeded, hook-failed
type: kubernetes.io/service-account-token

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: "{{ .Release.Name }}-preflight-rb"
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "-6"
    "helm.sh/hook-delete-policy": before-hook-creation, hook-succeeded, hook-failed
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: "{{ .Release.Name }}-preflight-role"
subjects:
- kind: ServiceAccount
  name: "{{ .Release.Name }}-preflight"
  namespace: {{ .Release.Namespace }}

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: "{{ .Release.Name }}-preflight-role"
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "-6"
    "helm.sh/hook-delete-policy": before-hook-creation, hook-succeeded, hook-failed
rules:
- apiGroups: [""]
  resources: ["nodes", "storageclasses", "customresourcedefinitions", "namespaces"]
  verbs: ["get", "watch", "list"]